{
  "console.log": {
    "prefix": ["log", "console log"],
    "body": "console.log(${1:$TM_SELECTED_TEXT});"
  },
  "console.debug": {
    "prefix": ["debug", "console debug"],
    "body": "console.debug(${1:$TM_SELECTED_TEXT});"
  },
  "console.info": {
    "prefix": ["info", "console info"],
    "body": "console.info(${1:$TM_SELECTED_TEXT});"
  },
  "console.warn": {
    "prefix": ["warn", "console warn"],
    "body": "console.error(${1:$TM_SELECTED_TEXT});"
  },
  "console.error": {
    "prefix": ["error", "console error"],
    "body": "console.error(${1:$TM_SELECTED_TEXT});"
  },

  "describe": {
    "prefix": ["d", "describe"],
    "body": "describe('${1:description}', () => {\n\t${0}\n})"
  },
  "describe top level": {
    "prefix": ["d", "describe top"],
    "body": "describe('${TM_FILENAME_BASE}', () => {\n\t${0}\n})"
  },
  "it": {
    "prefix": ["it"],
    "body": "it('${1:description}', ${2:async} () => {\n\t${0}\n})"
  },
  "it.todo": {
    "prefix": ["it todo"],
    "body": "it.todo('${1:description}')"
  },
  "beforeAll": {
    "prefix": ["ba", "before", "beforeAll"],
    "body": "beforeAll(${1:async} () => {\n\t${0}\n})"
  },
  "beforeEach": {
    "prefix": ["be", "before", "beforeEach"],
    "body": "beforeEach(${1:async} () => {\n\t${0}\n})"
  },
  "afterAll": {
    "prefix": ["aa", "after", "afterAll"],
    "body": "afterAll(${1:async} () => {\n\t${0}\n})"
  },
  "afterEach": {
    "prefix": ["ae", "after", "afterEach"],
    "body": "afterEach(${1:async} () => {\n\t${0}\n})"
  },

  "const statement from destructuring": {
    "prefix": ["cd", "const destructuring"],
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "const statement from array destructuring": {
    "prefix": ["cad", "const array destructuring"],
    "body": "const [ ${2:prop} ] = ${1:value}"
  },
  "const assignment awaited": {
    "prefix": ["ca", "const await"],
    "body": "const ${1:name} = await ${2:value}"
  },
  "const destructuring assignment awaited": {
    "prefix": ["cda", "const await destructuring"],
    "body": "const { ${1:name} } = await ${2:value}"
  },
  "const arrow function assignment": {
    "prefix": ["caf", "const arrow function"],
    "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
  },

  "module export": {
    "prefix": ["e", "export"],
    "body": "export ${1:member}"
  },
  "module export const": {
    "prefix": ["ec", "export const"],
    "body": "export const ${1:member} = ${2:value}"
  },
  "module default export": {
    "prefix": ["ed", "export default"],
    "body": "export default ${1:member}"
  },

  "import module": {
    "prefix": ["imp", "import"],
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module as": {
    "prefix": ["imp", "import as"],
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": ["imp", "import destructuring"],
    "body": "import {$2} from '${1:module}'"
  },

  "throw new Error": {
    "prefix": ["th", "throw"],
    "body": "throw new ${0:error}"
  },

  "try/catch": {
    "prefix": ["try catch"],
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/finally": {
    "prefix": ["try finally"],
    "body": "try {\n\t${0}\n} finally {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": ["try catch finally"],
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },

  "named function": {
    "prefix": ["fn", "function"],
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "arrow function": {
    "prefix": ["af", "arrow function"],
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "arrow function with destructuring": {
    "prefix": ["af", "arrow function destructuring"],
    "body": "({${1:arguments}}) => ${2:statement}"
  },

  "JSON.stringify()": {
    "prefix": ["stringify", "json stringify"],
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": ["parse", "json parse"],
    "body": "JSON.parse($0)"
  },

  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "if else",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },

  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },

  "Class Definition": {
    "prefix": ["class"],
    "body": [
      "class ${1:name} {",
      "\tconstructor(${2:parameters}) {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Class Definition"
  },
  "Class extends Definition": {
    "prefix": ["class extends"],
    "body": [
      "class ${1:name} extends ${2:name} {",
      "\tconstructor(${3:parameters}) {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Class Definition"
  }
}
